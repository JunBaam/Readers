[{"/home/ubuntu/BookReview/frontend/src/index.js":"1","/home/ubuntu/BookReview/frontend/src/App.js":"2","/home/ubuntu/BookReview/frontend/src/store.js":"3","/home/ubuntu/BookReview/frontend/src/pages/Home.js":"4","/home/ubuntu/BookReview/frontend/src/pages/BookSearch.js":"5","/home/ubuntu/BookReview/frontend/src/pages/Mypage.js":"6","/home/ubuntu/BookReview/frontend/src/utils/LoginRequiredRoute.js":"7","/home/ubuntu/BookReview/frontend/src/utils/UseLocalStorage.js":"8","/home/ubuntu/BookReview/frontend/src/pages/accounts/Login.js":"9","/home/ubuntu/BookReview/frontend/src/pages/accounts/Signup.js":"10","/home/ubuntu/BookReview/frontend/src/components/Layout/Navbar.js":"11","/home/ubuntu/BookReview/frontend/src/components/Layout/Footer.js":"12","/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchDetail.js":"13","/home/ubuntu/BookReview/frontend/src/components/BookSearch/Search.js":"14","/home/ubuntu/BookReview/frontend/src/components/Home/Slider.js":"15","/home/ubuntu/BookReview/frontend/src/components/Home/ReviewList.js":"16","/home/ubuntu/BookReview/frontend/src/components/Layout/Button.js":"17","/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchDetailItem.js":"18","/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchItem.js":"19","/home/ubuntu/BookReview/frontend/src/components/Home/Review.js":"20","/home/ubuntu/BookReview/frontend/src/utils/KaKaoSearch.js":"21","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserInfo.js":"22","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserLike.js":"23","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserReview.js":"24","/home/ubuntu/BookReview/frontend/src/components/Mypage/Profile.js":"25","/home/ubuntu/BookReview/frontend/src/utils/api.js":"26","/home/ubuntu/BookReview/frontend/src/components/Mypage/ProfileEdit.js":"27","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserReviewItem.js":"28","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserLikeItem.js":"29","/home/ubuntu/BookReview/frontend/src/utils/Constant.js":"30","/home/ubuntu/BookReview/frontend/src/utils/base64.js":"31","/home/ubuntu/BookReview/frontend/src/components/Home/ReviewDetailItem.js":"32","/home/ubuntu/BookReview/frontend/src/components/Home/ReviewEditForm.js":"33","/home/ubuntu/BookReview/frontend/src/components/Home/CommentList.js":"34","/home/ubuntu/BookReview/frontend/src/utils/timeCheck.js":"35","/home/ubuntu/BookReview/frontend/src/components/Home/Comment.js":"36","/home/ubuntu/BookReview/frontend/src/components/Home/ReviewDetail.js":"37"},{"size":389,"mtime":1606577305156,"results":"38","hashOfConfig":"39"},{"size":1411,"mtime":1606622507132,"results":"40","hashOfConfig":"39"},{"size":2252,"mtime":1606577279173,"results":"41","hashOfConfig":"39"},{"size":257,"mtime":1606577909062,"results":"42","hashOfConfig":"39"},{"size":202,"mtime":1606577903114,"results":"43","hashOfConfig":"39"},{"size":196,"mtime":1606577914918,"results":"44","hashOfConfig":"39"},{"size":1113,"mtime":1606577841103,"results":"45","hashOfConfig":"39"},{"size":1056,"mtime":1606577866155,"results":"46","hashOfConfig":"39"},{"size":4705,"mtime":1606578643796,"results":"47","hashOfConfig":"39"},{"size":5148,"mtime":1606578647308,"results":"48","hashOfConfig":"39"},{"size":3504,"mtime":1606629670006,"results":"49","hashOfConfig":"39"},{"size":336,"mtime":1606645619117,"results":"50","hashOfConfig":"39"},{"size":2058,"mtime":1606578595536,"results":"51","hashOfConfig":"39"},{"size":2077,"mtime":1606578589196,"results":"52","hashOfConfig":"39"},{"size":3108,"mtime":1606578530717,"results":"53","hashOfConfig":"39"},{"size":1113,"mtime":1606649889460,"results":"54","hashOfConfig":"39"},{"size":736,"mtime":1606578348982,"results":"55","hashOfConfig":"39"},{"size":5703,"mtime":1606646052800,"results":"56","hashOfConfig":"39"},{"size":765,"mtime":1606578601776,"results":"57","hashOfConfig":"39"},{"size":1604,"mtime":1606578434189,"results":"58","hashOfConfig":"39"},{"size":318,"mtime":1606621694718,"results":"59","hashOfConfig":"39"},{"size":664,"mtime":1606646277057,"results":"60","hashOfConfig":"39"},{"size":1156,"mtime":1606627084438,"results":"61","hashOfConfig":"39"},{"size":1090,"mtime":1606622211668,"results":"62","hashOfConfig":"39"},{"size":1524,"mtime":1606578175356,"results":"63","hashOfConfig":"39"},{"size":259,"mtime":1606577780544,"results":"64","hashOfConfig":"39"},{"size":3176,"mtime":1606578186412,"results":"65","hashOfConfig":"39"},{"size":1127,"mtime":1606578287831,"results":"66","hashOfConfig":"39"},{"size":1102,"mtime":1606578246539,"results":"67","hashOfConfig":"39"},{"size":111,"mtime":1606577810399,"results":"68","hashOfConfig":"39"},{"size":320,"mtime":1606577799051,"results":"69","hashOfConfig":"39"},{"size":5072,"mtime":1606578486397,"results":"70","hashOfConfig":"39"},{"size":3386,"mtime":1606578477761,"results":"71","hashOfConfig":"39"},{"size":2040,"mtime":1606578410170,"results":"72","hashOfConfig":"39"},{"size":654,"mtime":1606577852495,"results":"73","hashOfConfig":"39"},{"size":538,"mtime":1606578399078,"results":"74","hashOfConfig":"39"},{"size":2477,"mtime":1606622538564,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"czpg4y",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"78"},"/home/ubuntu/BookReview/frontend/src/index.js",[],["163","164"],"/home/ubuntu/BookReview/frontend/src/App.js",["165"],"import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Layout/Navbar\";\nimport Footer from \"./components/Layout/Footer\";\nimport Home from \"./pages/Home\";\nimport ReviewDetail from \"./components/Home/ReviewDetail\";\n// import PostDetail from \"./components/Home/PostDetail\";\nimport BookSearch from \"./pages/BookSearch\";\nimport SearchDetail from \"./components/BookSearch/SearchDetail\";\nimport Mypage from \"./pages/Mypage\";\nimport Login from \"./pages/accounts/Login\";\nimport Signup from \"./pages/accounts/Signup\";\n\n//로그인필수\nimport LoginRequiredRoute from \"./utils/LoginRequiredRoute\";\n\n//최상위 컴포넌트 App\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <LoginRequiredRoute exact path=\"/detail/:id\" component={ReviewDetail} />\n        {/* <Route exact path=\"/detail/:id\" component={PostDetail} /> */}\n        <LoginRequiredRoute exact path=\"/search\" component={BookSearch} />\n        <LoginRequiredRoute\n          exact\n          path=\"/search/:isbn\"\n          component={SearchDetail}\n        />\n        <LoginRequiredRoute exact path=\"/mypage\" component={Mypage} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signup\" component={Signup} />\n      </Switch>\n      <Footer />\n    </>\n  );\n}\nexport default App;\n","/home/ubuntu/BookReview/frontend/src/store.js",[],"/home/ubuntu/BookReview/frontend/src/pages/Home.js",[],"/home/ubuntu/BookReview/frontend/src/pages/BookSearch.js",[],"/home/ubuntu/BookReview/frontend/src/pages/Mypage.js",[],"/home/ubuntu/BookReview/frontend/src/utils/LoginRequiredRoute.js",[],"/home/ubuntu/BookReview/frontend/src/utils/UseLocalStorage.js",[],"/home/ubuntu/BookReview/frontend/src/pages/accounts/Login.js",["166","167"],"import React, { useState } from \"react\";\r\nimport { Card, Form, Input, Button, notification } from \"antd\";\r\nimport { useHistory, Link, useLocation } from \"react-router-dom\";\r\nimport { SmileOutlined, FrownOutlined } from \"@ant-design/icons\";\r\nimport Axios from \"axios\";\r\nimport \"./Login.css\";\r\n//import useLocalStorage from \"../../utils/useLocalStorage\";\r\nimport { setToken, useAppContext } from \"../../store\";\r\n\r\nfunction Login() {\r\n  const { dispatch } = useAppContext();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  //const [jwtToken, setJwtToken] = useLocalStorage(\"jwtToken\", \"\");\r\n  const [fieldErrors, setFieldErrors] = useState({});\r\n  // location.state거 있으면 location 으로\r\n  //location.state가 없으면  home 으로 .\r\n  const { from: loginRedirectUrl } = location.state || {\r\n    from: { pathname: \"/\" },\r\n  };\r\n\r\n  const onFinish = values => {\r\n    async function fn() {\r\n      const { email, username, password } = values;\r\n      const data = { email, password };\r\n\r\n      setFieldErrors({});\r\n\r\n      try {\r\n        const response = await Axios.post(\r\n          \"http://15.165.223.171:8080/accounts/login/\",\r\n          data\r\n        );\r\n\r\n        console.log(\"login_response\", response);\r\n        //response.data에서 token , username 를 꺼냄\r\n        const {\r\n          data: { token: jwtToken, username: login_user, pk: login_pk },\r\n        } = response;\r\n\r\n        localStorage.setItem(\"username\", login_user);\r\n        localStorage.setItem(\"pk\", login_pk);\r\n        //저장\r\n        dispatch(setToken(jwtToken));\r\n\r\n        notification.open({\r\n          message: \"환영합니다!\",\r\n          icon: <SmileOutlined style={{ color: \"#108ee9\" }} />,\r\n        });\r\n\r\n        history.push(loginRedirectUrl);\r\n      } catch (error) {\r\n        if (error.response) {\r\n          notification.open({\r\n            message: \"회원가입 실패\",\r\n            description: \"아이디/암호를 확인해주세요.\",\r\n            icon: <FrownOutlined style={{ color: \"#ff3333\" }} />,\r\n          });\r\n\r\n          const { data: fieldsErrorMessages } = error.response;\r\n          console.log(error.response);\r\n          setFieldErrors(\r\n            Object.entries(fieldsErrorMessages).reduce(\r\n              (acc, [fieldName, errors]) => {\r\n                acc[fieldName] = {\r\n                  //Ant에 존재하는 값\r\n                  validateStatus: \"error\",\r\n                  help: errors,\r\n                };\r\n                //console.log(acc);\r\n                return acc;\r\n              },\r\n              {}\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n    fn();\r\n  };\r\n  return (\r\n    <div className=\"login_form\">\r\n      <Card\r\n        title=\"로그인\"\r\n        // style={{ width: 600 }}\r\n      >\r\n        <Form\r\n          style={{ color: \"red\" }}\r\n          {...layout}\r\n          onFinish={onFinish}\r\n\r\n          // onFinishFailed={onFinishFailed}\r\n        >\r\n          <Form.Item\r\n            name=\"email\"\r\n            label={<label style={{ color: \"white\" }}>이메일</label>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"이메일을 작성해주세요!\",\r\n              },\r\n              {\r\n                type: \"email\",\r\n                message: \"잘못된 이메일형식입니다!\",\r\n              },\r\n            ]}\r\n            hasFeedback\r\n          >\r\n            <Input placeholder=\"이메일 주소 입력\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label={<label style={{ color: \"white\" }}>비밀번호</label>}\r\n            name=\"password\"\r\n            hasFeedback\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"비밀번호를 작성해주세요!\",\r\n              },\r\n              {\r\n                min: 8,\r\n                message: \"8글자이상 입력해주세요!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password placeholder=\"비밀번호 입력\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              로그인\r\n            </Button>\r\n            <div className=\"from_input_signup\">\r\n              계정이 없으신가요? <br />\r\n              <Link to=\"/signup\" className=\"from_input_signup\">\r\n                리더스 가입하기\r\n              </Link>\r\n            </div>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n//ant d\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nexport default Login;\r\n","/home/ubuntu/BookReview/frontend/src/pages/accounts/Signup.js",[],"/home/ubuntu/BookReview/frontend/src/components/Layout/Navbar.js",["168","169"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"./Button\";\r\nimport logo from \"../../images/logo.png\";\r\nimport { useAppContext } from \"../../store\";\r\n\r\nfunction Navbar() {\r\n  const [button, setButton] = useState(true);\r\n  const [click, setClick] = useState(false);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"resize\", showButton);\r\n  const login_user = localStorage.getItem(\"username\");\r\n\r\n  const authLinks = login_user + \"님\";\r\n  const guestLinks = (\r\n    <>\r\n      <Link className=\"navbar_guest\" to=\"/login\">\r\n        <Button buttonStyle=\"btn_outline\">로그인 / 회원가입</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar_container\">\r\n          <Link to=\"/\" className=\"navbar_logo\">\r\n            <img src={logo} alt=\"\" />\r\n          </Link>\r\n          {/* 토글아이콘  */}\r\n          <div className=\"menu-icon\" onClick={handleClick}>\r\n            <i className={click ? \"fas fa-times\" : \"fas fa-bars\"} />\r\n          </div>\r\n          <ul className={click ? \"nav-menu active\" : \"nav-menu\"}>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-links\" onClick={closeMobileMenu}>\r\n                홈\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/search\"\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                도서검색 / 후기검색\r\n              </Link>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link to=\"/book\" className=\"nav-links\" onClick={closeMobileMenu}>\r\n                도서검색\r\n              </Link>\r\n            </li> */}\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                to=\"/mypage\"\r\n                className=\"nav-links\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                마이페이지\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link\r\n                to=\"/login\"\r\n                className=\"nav-links-mobile\"\r\n                onClick={closeMobileMenu}\r\n              >\r\n                로그인 / 회원가입\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div>\r\n            {/* {login_user === null ? (\r\n              button && (\r\n                <Button buttonStyle=\"btn_outline\">로그인 / 회원가입</Button>\r\n              )\r\n            ) : (\r\n              //TODO:  styling\r\n\r\n              <button>{login_user}</button>\r\n            )} */}\r\n            {\r\n              // 스토리지에 로그인유저가잇으면 authLink를\r\n              // 아니면 guestLink를 보여줌\r\n              <div className=\"nav_login\">\r\n                {login_user != null ? (\r\n                  <p className=\"navbar_auth\">{authLinks}</p>\r\n                ) : (\r\n                  guestLinks\r\n                )}\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","/home/ubuntu/BookReview/frontend/src/components/Layout/Footer.js",[],"/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchDetail.js",["170"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchDetailItem from \"./SearchDetailItem\";\r\nimport \"./SearchDetail.css\";\r\n\r\nfunction SearchDetail({ match }) {\r\n  //match : 객체에 어떤 라우트에 매칭이 되었는지에 대한 정보가 들어있다.(url 파라미터값을가져옴)\r\n  useEffect(() => {\r\n    bookSearchHandler();\r\n    // console.log(\"Match!\", match.params.title);\r\n  }, []);\r\n\r\n  const [book, setBooks] = useState([]);\r\n\r\n  // const isbn = value.substring(10);\r\n  // console.log(\"isbn\", isbn);\r\n\r\n  const Kakao = axios.create({\r\n    baseURL: \"https://dapi.kakao.com\",\r\n    headers: {\r\n      Authorization: \"KakaoAK 68847a905995af090de7c5f2634912d4\",\r\n    },\r\n  });\r\n\r\n  const bookSearch = params => {\r\n    return Kakao.get(\"/v3/search/book?target=isbn\", { params });\r\n  };\r\n\r\n  const bookSearchHandler = async (query, reset) => {\r\n    const params = {\r\n      query: match.params.isbn.substring(10), //선택한 제목을 기준으로 값을 가져옴\r\n      sort: \"accuracy\", // accuracy | recency 정확도 or 최신\r\n      page: 1, // 페이지번호 디폴트 1\r\n      size: 16, // 한 페이지에 보여질 오브젝트 갯수 디폴트 10 (1~50)\r\n    };\r\n\r\n    const { data } = await bookSearch(params);\r\n    setBooks(data.documents);\r\n    // console.log(\"책상세히보기\", data.documents);\r\n\r\n    if (reset) {\r\n      setBooks(data.documents);\r\n      console.log(data.documents);\r\n    } else {\r\n      //concat : 기존배열에 원소 또는 배열을 추가함\r\n      setBooks(book.concat(data.documents));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {book.map((book, index) => (\r\n        <SearchDetailItem\r\n          key={index}\r\n          thumbnail={book.thumbnail}\r\n          title={book.title}\r\n          contents={book.contents}\r\n          author={book.authors}\r\n          price={book.price}\r\n          publisher={book.publisher}\r\n          // 0~10만 남김\r\n          date={book.datetime.slice(0, 10)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchDetail;\r\n","/home/ubuntu/BookReview/frontend/src/components/BookSearch/Search.js",["171"],"import React, { useEffect, useState } from \"react\";\r\nimport { bookSearch } from \"../../utils/KaKaoSearch\";\r\nimport SearchItem from \"./SearchItem\";\r\nimport \"./Search.css\";\r\n\r\nfunction Search() {\r\n  const [books, setBooks] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (query.length > 0) {\r\n      bookSearchHandler(query, true);\r\n    }\r\n  }, [query]);\r\n\r\n  // 엔터를 눌렀을 때 호출 되는 함수\r\n  const onEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      setQuery(text);\r\n    }\r\n  };\r\n\r\n  // text 검색어가 바뀔 때 호출되는 함수\r\n  const onTextUpdate = e => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const bookSearchHandler = async (query, reset) => {\r\n    const params = {\r\n      query: query,\r\n      sort: \"accuracy\", // accuracy | recency 정확도 or 최신\r\n      page: 1, // 페이지번호\r\n      size: 16, // 한 페이지에 보여 질 문서의 개수\r\n    };\r\n\r\n    const { data } = await bookSearch(params);\r\n\r\n    if (reset) {\r\n      setBooks(data.documents);\r\n      console.log(data.documents);\r\n    } else {\r\n      //concat : 기존배열에 원소 또는 배열을 추가함\r\n      setBooks(books.concat(data.documents));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"container_title\">도서검색</div>\r\n\r\n      {/* 검색창 */}\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"찾고자하는 도서를 작성후 엔터를 입력해주세요!\"\r\n        name=\"query\"\r\n        className=\"input_search\"\r\n        onKeyDown={onEnter} // enter\r\n        onChange={onTextUpdate} // change\r\n        value={text} // view\r\n      />\r\n\r\n      {/* 검색결과 */}\r\n      <div className=\"search_result\">\r\n        {books.map((book, index) => (\r\n          <SearchItem\r\n            key={index}\r\n            thumbnail={book.thumbnail}\r\n            title={book.title}\r\n            author={book.authors}\r\n            isbn={book.isbn}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","/home/ubuntu/BookReview/frontend/src/components/Home/Slider.js",["172"],"import React, { useEffect, useState } from \"react\";\r\n// Import Swiper React components\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from \"swiper\";\r\nimport \"./Slider.css\";\r\n// Import Swiper styles\r\nimport \"swiper/swiper.scss\";\r\nimport \"swiper/components/navigation/navigation.scss\";\r\nimport \"swiper/components/pagination/pagination.scss\";\r\nimport \"swiper/components/scrollbar/scrollbar.scss\";\r\nimport Axios from \"axios\";\r\nimport { useAppContext } from \"../../store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\nfunction Slider() {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n\r\n  const [reviewList, setReviewList] = useState([]);\r\n\r\n  const apiUrl = \"http://15.165.223.171:8080/api/bookmark/\";\r\n\r\n  useEffect(() => {\r\n    Axios.get(apiUrl, headers)\r\n      .then(response => {\r\n        const data = response.data;\r\n        function CountSort(a, b) {\r\n          //is_like_count 에 접근\r\n          if (a.is_like_count === b.is_like_count) {\r\n            return 0;\r\n          }\r\n          return a.is_like_count < b.is_like_count ? 1 : -1;\r\n        }\r\n        const sort = data.sort(CountSort).slice(0, 10);\r\n        console.log(\"슬라이드응답\", sort);\r\n        setReviewList(sort);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error\", error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"slide\">\r\n      <div className=\"slide_name\">\r\n        <h2>북마크 베스트</h2>\r\n      </div>\r\n\r\n      <Swiper\r\n        spaceBetween={20}\r\n        slidesPerView={3}\r\n        navigation\r\n        pagination={{ clickable: true }}\r\n        scrollbar={{ draggable: true }}\r\n        //onSlideChange={() => console.log(\"slide change\")}\r\n        // onSwiper={swiper => console.log(swiper)}\r\n        //.filter(likeTrueUser => likeTrueUser.is_like_count > 1)\r\n      >\r\n        {reviewList &&\r\n          reviewList.map((review, index) => (\r\n            <SwiperSlide key={index}>\r\n              <Link to={`/detail/${review.id}`} className=\"post_detail_link\">\r\n                <div className=\"slide_box\">\r\n                  <div className=\"slide_image\">\r\n                    <img src={review.image_url} alt={review.title} />\r\n                    <div className=\"slide_rank_border\">\r\n                      <div className=\"slide_rank\">{index + 1}</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"slide_content\">\r\n                    <div className=\"slide_title\">{review.title}</div>\r\n                    <div className=\"slide_author\">{review.author}</div>\r\n                    <div className=\"slide_category\">#{review.category}</div>\r\n                    <div className=\"slide_like\">\r\n                      북마크: {review.is_like_count}개\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            </SwiperSlide>\r\n          ))}\r\n      </Swiper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","/home/ubuntu/BookReview/frontend/src/components/Home/ReviewList.js",["173","174"],"/home/ubuntu/BookReview/frontend/src/components/Layout/Button.js",[],"/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchDetailItem.js",[],"/home/ubuntu/BookReview/frontend/src/components/BookSearch/SearchItem.js",[],"/home/ubuntu/BookReview/frontend/src/components/Home/Review.js",[],"/home/ubuntu/BookReview/frontend/src/utils/KaKaoSearch.js",[],"/home/ubuntu/BookReview/frontend/src/components/Mypage/UserInfo.js",[],"/home/ubuntu/BookReview/frontend/src/components/Mypage/UserLike.js",["175","176","177"],"import React, { useEffect } from \"react\";\r\nimport { useAppContext } from \"../../store\";\r\nimport \"./UserLike.css\";\r\nimport UserLikeItem from \"./UserLikeItem\";\r\nimport { useAxios } from \"../../utils/api\";\r\n\r\nfunction UserLike() {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n  //const [reviewList, setReviewList] = useState([]);\r\n\r\n  const [{ data: originPostList, loading, error }, refetch] = useAxios({\r\n    url: \"/api/posts/\",\r\n    headers,\r\n  });\r\n\r\n  useEffect(() => {\r\n    //setReviewList(originPostList);\r\n    // 컴포넌트가 보여질때마다 데이터를 갱신\r\n    refetch();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"userlike_containter\">\r\n      <div className=\"userlike_items\">\r\n        {originPostList &&\r\n          originPostList\r\n            // 받아온값에서 is_like 값이 true 인것만 가져옴 !!\r\n            .filter(likeTrueUser => likeTrueUser.is_like === true)\r\n            .map(review => {\r\n              return <UserLikeItem review={review} key={review.id} />;\r\n            })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserLike;\r\n","/home/ubuntu/BookReview/frontend/src/components/Mypage/UserReview.js",["178","179","180","181","182"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAppContext } from \"../../store\";\r\nimport { useAxios } from \"../../utils/api\";\r\nimport UserReviewItem from \"./UserReviewItem\";\r\nimport \"./UserReview.css\";\r\n\r\nfunction UserReview() {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n  const [reviewList, setReviewList] = useState([]);\r\n\r\n  const [{ data: originPostList, loading, error }, refetch] = useAxios({\r\n    url: \"/api/posts/userreview\",\r\n    headers,\r\n  });\r\n\r\n  useEffect(() => {\r\n    //setReviewList(originPostList);\r\n    // 컴포넌트가 보여질때마다 데이터를 갱신\r\n    console.log(\"로그인유저리스트\", originPostList);\r\n    refetch();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"user_review_containter\">\r\n      <div className=\"user_review_items\">\r\n        {originPostList &&\r\n          originPostList.map(review => {\r\n            return <UserReviewItem review={review} key={review.id} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserReview;\r\n","/home/ubuntu/BookReview/frontend/src/components/Mypage/Profile.js",["183"],"import React, { useState, useEffect } from \"react\";\r\nimport ProfileEdit from \"./ProfileEdit\";\r\nimport { useAppContext } from \"../../store\";\r\nimport Axios from \"axios\";\r\n\r\nfunction Profile() {\r\n  // 수정\r\n  const [editMode, setEditMode] = useState(false);\r\n  const changeToFalse = () => {\r\n    setEditMode(false);\r\n  };\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n  const user_pk = localStorage.getItem(\"pk\");\r\n  const [profile, setProfile] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const apiUrl = `http://15.165.223.171:8080/api/user/${user_pk}`;\r\n    Axios.get(apiUrl, { headers })\r\n      .then(response => {\r\n        const data = response.data;\r\n        setProfile(data);\r\n        console.log(\"유저정보\", data);\r\n      })\r\n\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {editMode ? (\r\n        <ProfileEdit changeToFalse={changeToFalse} profile={profile} />\r\n      ) : (\r\n        <div className=\"profile_card\">\r\n          <img className=\"user_img\" src={profile.avatar} alt={profile.id} />\r\n          <div className=\"user_info\">\r\n            <span className=\"user_email\">{profile.email}</span>\r\n            <br />\r\n          </div>\r\n\r\n          <button\r\n            onClick={() => setEditMode(true)}\r\n            className=\"profile_edit_btn\"\r\n          >\r\n            프로필 수정\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","/home/ubuntu/BookReview/frontend/src/utils/api.js",[],"/home/ubuntu/BookReview/frontend/src/components/Mypage/ProfileEdit.js",[],"/home/ubuntu/BookReview/frontend/src/components/Mypage/UserReviewItem.js",[],"/home/ubuntu/BookReview/frontend/src/components/Mypage/UserLikeItem.js",[],"/home/ubuntu/BookReview/frontend/src/utils/Constant.js",[],"/home/ubuntu/BookReview/frontend/src/utils/base64.js",[],"/home/ubuntu/BookReview/frontend/src/components/Home/ReviewDetailItem.js",[],"/home/ubuntu/BookReview/frontend/src/components/Home/ReviewEditForm.js",["184"],"import React from \"react\";\r\nimport { Form, Input, Button, Radio, Rate } from \"antd\";\r\nimport { useAppContext } from \"../../store\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst plainOptions = [\r\n  \"대학교재\",\r\n  \"만화\",\r\n  \"초등/유아\",\r\n  \"잡지\",\r\n  \"컴퓨터/IT\",\r\n  \"여행\",\r\n  \"취업/수험\",\r\n  \"과학\",\r\n  \"외국어\",\r\n  \"기술/공학\",\r\n  \"종교\",\r\n  \"역사/문화\",\r\n  \"정치/사회\",\r\n  \"자기계발\",\r\n  \"경제/경영\",\r\n  \"건강\",\r\n  \"요리\",\r\n  \"가정/육아\",\r\n  \"인문\",\r\n  \"시/에세이\",\r\n  \"소설\",\r\n  \"중/고등참고서\",\r\n  \"예술/대중문화\",\r\n  \"취미/실용/스포츠\",\r\n];\r\n\r\nconst desc = [\"1점\", \"2점\", \"3점\", \"4점\", \"5점\"];\r\n\r\nfunction ReviewEditForm({ review }) {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const apiUrl = `http://15.165.223.171:8080/api/posts/${review.id}/`;\r\n\r\n  const handleReviewEdit = async fieldValues => {\r\n    const { rating, category, review } = fieldValues;\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"review\", review);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"rating\", rating);\r\n\r\n    const headers = { Authorization: `JWT ${jwtToken}` };\r\n    try {\r\n      const response = await Axios.patch(apiUrl, formData, {\r\n        headers,\r\n      });\r\n\r\n      console.log(\"응답성공 \", response);\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.error(\"에러\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"detail_form_middle\">\r\n      <Form onFinish={handleReviewEdit} style={{ color: \"red\" }}>\r\n        {/* 책 카테고리(분류) */}\r\n        <div className=\"detail_catecory\">\r\n          <Form.Item\r\n            name=\"category\"\r\n            label={<label style={{ color: \"white\" }}>카테고리</label>}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"하나의 카테고리를 선택해주세요!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Radio.Group\r\n              options={plainOptions}\r\n              optionType=\"button\"\r\n              // buttonStyle=\"solid\"\r\n            ></Radio.Group>\r\n          </Form.Item>\r\n        </div>\r\n\r\n        {/* 별점 */}\r\n        <Form.Item\r\n          label={<label style={{ color: \"white\" }}>평점</label>}\r\n          name=\"rating\"\r\n          rules={[{ required: true, message: \"별을 눌러주세요! \" }]}\r\n        >\r\n          <Rate tooltips={desc} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={<label style={{ color: \"white\" }}>후기내용</label>}\r\n          name=\"review\"\r\n          hasFeedback\r\n          rules={[\r\n            { required: true, message: \"후기를 작성해주세요!\" },\r\n            { min: 1, message: \"1글자이상 입력해주세요!\" },\r\n          ]}\r\n        >\r\n          <Input.TextArea placeholder=\"후기작성\" />\r\n        </Form.Item>\r\n\r\n        {/* 후기작성버튼 */}\r\n        <Form.Item {...tailLayout}>\r\n          <Button className=\"detail_btn\" type=\"primary\" htmlType=\"submit\">\r\n            작성하기\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Antd 레이아웃\r\nconst layout = {\r\n  labelCol: { span: 3 },\r\n  wrapperCol: { span: 20 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 3, span: 16 },\r\n};\r\nexport default ReviewEditForm;\r\n","/home/ubuntu/BookReview/frontend/src/components/Home/CommentList.js",["185"],"import React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useAppContext } from \"../../store\";\r\nimport { Input, Button } from \"antd\";\r\nimport useAxios from \"axios-hooks\";\r\nimport Comment from \"./Comment\";\r\nimport \"./Comment.css\";\r\n\r\nfunction CommentList({ review }) {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n\r\n  const apiUrl = `http://15.165.223.171:8080/api/posts/${review.id}/comments/`;\r\n\r\n  const [{ data: commentList, loading, error }, refetch] = useAxios({\r\n    url: `http://15.165.223.171:8080/api/posts/${review.id}/comments/`,\r\n    headers,\r\n  });\r\n\r\n  console.log(\"댓글목록\", commentList);\r\n\r\n  const [commentContent, setCommentContent] = useState(\"\");\r\n\r\n  const handleCommentSave = async () => {\r\n    console.group(\"handleCommentSave\");\r\n    try {\r\n      const response = await Axios.post(\r\n        apiUrl,\r\n        { message: commentContent },\r\n        { headers }\r\n      );\r\n      console.log(response);\r\n      setCommentContent(\"\");\r\n      refetch();\r\n    } catch (error) {}\r\n\r\n    console.log(error);\r\n  };\r\n\r\n  return (\r\n    <div className=\"comment_container\">\r\n      {/* 비어있을경우도 반영한다. */}\r\n      {commentList &&\r\n        commentList.map(comment => {\r\n          return <Comment key={comment.id} comment={comment} />;\r\n        })}\r\n      {/* 현재작성 : {commentContent} */}\r\n      <Input.TextArea\r\n        style={{\r\n          width: \"800px\",\r\n          height: \"80px\",\r\n          marginTop: \"15px\",\r\n          marginBottom: \".5em\",\r\n          zIndex: \"inherit\",\r\n        }}\r\n        value={commentContent}\r\n        // 작성한값을 반영\r\n        onChange={e => setCommentContent(e.target.value)}\r\n      />\r\n\r\n      <Button\r\n        block\r\n        style={{ fontWeight: \"bold\" }}\r\n        type=\"primary\"\r\n        disabled={commentContent.length === 0}\r\n        onClick={handleCommentSave}\r\n      >\r\n        댓글 쓰기\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentList;\r\n","/home/ubuntu/BookReview/frontend/src/utils/timeCheck.js",[],"/home/ubuntu/BookReview/frontend/src/components/Home/Comment.js",[],"/home/ubuntu/BookReview/frontend/src/components/Home/ReviewDetail.js",["186"],"import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useAppContext } from \"../../store\";\r\nimport \"./ReviewDetail.css\";\r\nimport ReviewDetailItem from \"./ReviewDetailItem\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ReviewDetail({ match }) {\r\n  const {\r\n    store: { jwtToken },\r\n  } = useAppContext();\r\n\r\n  const headers = { Authorization: `JWT ${jwtToken}` };\r\n\r\n  const [review, setReview] = useState([]);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    const apiUrl = `http://15.165.223.171:8080/api/posts/${match.params.id}`;\r\n    Axios.get(apiUrl, { headers })\r\n      .then(response => {\r\n        const data = response.data;\r\n        // [data] : object를 응답으로 받아서 map을 적용하기위해 [] 처리\r\n        setReview([data]);\r\n\r\n        console.log(\"개인리뷰\", [data]);\r\n      })\r\n\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  // 게시글 좋아요\r\n  const handleLike = async ({ review, isLike }) => {\r\n    const apiUrl = `http://15.165.223.171:8080/api/posts/${match.params.id}/like/`;\r\n    const method = isLike ? \"POST\" : \"DELETE\"; //isLike false면 POST 요청 아니면 DELETE 요청\r\n\r\n    try {\r\n      const response = await Axios({\r\n        url: apiUrl,\r\n        method,\r\n        headers,\r\n      });\r\n      console.log(\"response :\", response);\r\n\r\n      setReview(prevList => {\r\n        return prevList.map(currentReview =>\r\n          currentReview === review\r\n            ? { ...currentReview, is_like: isLike }\r\n            : currentReview\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error :\", error);\r\n    }\r\n  };\r\n\r\n  // 게시글 삭제\r\n  const handleDelete = async () => {\r\n    const apiUrl = `http://15.165.223.171:8080/api/posts/${match.params.id}/`;\r\n    const method = \"DELETE\";\r\n\r\n    try {\r\n      const response = await Axios({\r\n        url: apiUrl,\r\n        method,\r\n        headers,\r\n      });\r\n      console.log(\"삭제성공 :\", response);\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      console.log(\"error :\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* 중괄호 리턴 필수 */}\r\n      {review.map(review => {\r\n        return (\r\n          <ReviewDetailItem\r\n            review={review}\r\n            key={review.id}\r\n            handleLike={handleLike}\r\n            handleDelete={handleDelete}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ReviewDetail;\r\n",{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":2,"column":27,"nodeType":"193","messageId":"194","endLine":2,"endColumn":33},{"ruleId":"191","severity":1,"message":"195","line":15,"column":10,"nodeType":"193","messageId":"194","endLine":15,"endColumn":21},{"ruleId":"191","severity":1,"message":"196","line":24,"column":22,"nodeType":"193","messageId":"194","endLine":24,"endColumn":30},{"ruleId":"191","severity":1,"message":"197","line":9,"column":10,"nodeType":"193","messageId":"194","endLine":9,"endColumn":16},{"ruleId":"191","severity":1,"message":"198","line":16,"column":14,"nodeType":"193","messageId":"194","endLine":16,"endColumn":22},{"ruleId":"199","severity":1,"message":"200","line":11,"column":6,"nodeType":"201","endLine":11,"endColumn":8,"suggestions":"202"},{"ruleId":"199","severity":1,"message":"200","line":15,"column":6,"nodeType":"201","endLine":15,"endColumn":13,"suggestions":"203"},{"ruleId":"199","severity":1,"message":"204","line":46,"column":6,"nodeType":"201","endLine":46,"endColumn":8,"suggestions":"205"},{"ruleId":"191","severity":1,"message":"206","line":1,"column":17,"nodeType":"193","messageId":"194","endLine":1,"endColumn":28},{"ruleId":"199","severity":1,"message":"204","line":26,"column":6,"nodeType":"201","endLine":26,"endColumn":8,"suggestions":"207"},{"ruleId":"191","severity":1,"message":"208","line":15,"column":34,"nodeType":"193","messageId":"194","endLine":15,"endColumn":41},{"ruleId":"191","severity":1,"message":"209","line":15,"column":43,"nodeType":"193","messageId":"194","endLine":15,"endColumn":48},{"ruleId":"199","severity":1,"message":"210","line":24,"column":6,"nodeType":"201","endLine":24,"endColumn":8,"suggestions":"211"},{"ruleId":"191","severity":1,"message":"212","line":13,"column":10,"nodeType":"193","messageId":"194","endLine":13,"endColumn":20},{"ruleId":"191","severity":1,"message":"213","line":13,"column":22,"nodeType":"193","messageId":"194","endLine":13,"endColumn":35},{"ruleId":"191","severity":1,"message":"208","line":15,"column":34,"nodeType":"193","messageId":"194","endLine":15,"endColumn":41},{"ruleId":"191","severity":1,"message":"209","line":15,"column":43,"nodeType":"193","messageId":"194","endLine":15,"endColumn":48},{"ruleId":"199","severity":1,"message":"214","line":25,"column":6,"nodeType":"201","endLine":25,"endColumn":8,"suggestions":"215"},{"ruleId":"199","severity":1,"message":"216","line":32,"column":6,"nodeType":"201","endLine":32,"endColumn":8,"suggestions":"217"},{"ruleId":"191","severity":1,"message":"218","line":119,"column":7,"nodeType":"193","messageId":"194","endLine":119,"endColumn":13},{"ruleId":"191","severity":1,"message":"208","line":18,"column":31,"nodeType":"193","messageId":"194","endLine":18,"endColumn":38},{"ruleId":"199","severity":1,"message":"219","line":31,"column":6,"nodeType":"201","endLine":31,"endColumn":8,"suggestions":"220"},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'fieldErrors' is assigned a value but never used.","'username' is assigned a value but never used.","'button' is assigned a value but never used.","'jwtToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bookSearchHandler'. Either include it or remove the dependency array.","ArrayExpression",["223"],["224"],"React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.",["225"],"'useCallback' is defined but never used.",["226"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["227"],"'reviewList' is assigned a value but never used.","'setReviewList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'originPostList' and 'refetch'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'headers' and 'user_pk'. Either include them or remove the dependency array.",["229"],"'layout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headers' and 'match.params.id'. Either include them or remove the dependency array.",["230"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"235","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [bookSearchHandler]",{"range":"246","text":"247"},"Update the dependencies array to be: [bookSearchHandler, query]",{"range":"248","text":"249"},"Update the dependencies array to be: [headers]",{"range":"250","text":"251"},{"range":"252","text":"251"},"Update the dependencies array to be: [refetch]",{"range":"253","text":"254"},"Update the dependencies array to be: [originPostList, refetch]",{"range":"255","text":"256"},"Update the dependencies array to be: [headers, user_pk]",{"range":"257","text":"258"},"Update the dependencies array to be: [headers, match.params.id]",{"range":"259","text":"260"},[367,369],"[bookSearchHandler]",[425,432],"[bookSearchHandler, query]",[1469,1471],"[headers]",[713,715],[637,639],"[refetch]",[709,711],"[originPostList, refetch]",[872,874],"[headers, user_pk]",[903,905],"[headers, match.params.id]"]